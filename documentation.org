#+STARTUP: showall indent hidestars
#+TOC: headlines 3

* Overview

Проект представляет собой простое игровое приложение на базе SDL2, в котором есть два игрока, каждый управляется своим набором клавиш. Описание компонентов и их взаимодействий приведено ниже:

    ~Main.cpp~: Здесь начинается выполнение программы. Создается объект App, и вызывается метод loop(), который запускает основной игровой цикл.

    ~App~: Главный класс приложения. Он управляет инициализацией SDL, обработкой событий, обновлением состояния игры и отрисовкой объектов.
    - Инициализация: В конструкторе App инициализируются SDL, IMG, TTF, создаются окно и рендерер, а также объекты игры (игроки и их фигуры).
    - Игровой цикл: Метод ~loop()~ управляет основным игровым циклом, который включает обработку событий (~processEvents()~), обновление состояния игры (~update()~) и отрисовку (~draw()~).
    - Обработка событий: В ~processEvents()~ обрабатываются SDL события. События нажатия кнопок передаются в ~EventManager~, который уведомляет подписанные слушатели событий.
    - Отрисовка: В методе ~SceneObject::draw()~ все видимые объекты сцены отрисовываются с учетом текущего состояния Viewport.

    ~EventManager~: Этот класс управляет подписчиками на события (добавляет и удаляет их)  и распространяет события среди всех подписанных Listener-ов, когда вызывается его метод ~sendEvent~

    ~EventListener~: Базовый интерфейс для всех объектов, которые могут принимать события. Эти объекты добавляются к списку Listener-ов EventManager-a.

    ~Player~: Наследует ~EventListener~ и ~SceneObject~. Управляет фигурой игрока на основе событий клавиатуры. Обрабатывает нажатия клавиш, обновляет положение фигуры и отрисовывает её.

    ~Figure~: Класс, представляющий игровую фигуру, управляет её отрисовкой и перемещением.

    ~Scene~: Управляет всеми объектами на игровой сцене. Добавляет, обновляет и отрисовывает объекты.

    ~Viewport~: Определяет область видимости сцены.

    ~TextRenderer~: Управляет загрузкой шрифтов и отрисовкой текста.

    ~StackCleanup~: Обеспечивает корректное освобождение ресурсов при завершении программы.

    ~Spritesheet~: Класс для работы с изображением, содержащим несколько спрайтов. Позволяет выбрать и отрисовать конкретный спрайт из листа спрайтов.

    ~Utils~: Вспомогательные функции для загрузки изображений.

** Взаимодействие между компонентами:

App инициализирует все основные компоненты, создает игроков и добавляет их в Scene. App также управляет всеми аспектами приложения, включая инициализацию, игровой цикл, обработку событий, обновление состояния игры и отрисовку.

Игровой цикл в App обрабатывает события с помощью EventManager и обновляет состояние сцены.

EventManager уведомляет Player о событиях клавиатуры.

Player на основе полученных событий управляет фигурой и обновляет её положение.

Scene обновляет и отрисовывает все объекты, если они видимы в текущем Viewport.

TextRenderer отрисовывает текст на экране.

StackCleanup отвечает за корректное завершение и освобождение ресурсов SDL, IMG и TTF.

** Иерархия классов и цепочка вызовов

Схема наследования и переопределения методов в проекте организована следующим образом:

EventListener: Базовый интерфейс, который должны реализовать все классы, желающие получать события. Он включает метод
- ~onEvent~ для обработки событий клавиатуры.

SceneObject: Интерфейс для объектов, которые могут быть добавлены в сцену. Он включает методы:
- ~update~ для обновления состояния
- ~draw~ для отрисовки
- ~getBoundingBox~ для получения границ фигуры

  Player наследует EventListener и переопределяет
  - onEvent
  - draw
  - update
  - update

Цепочка вызовов организована следующим образом:

- Инициализация:
  -  App создает экземпляры Player и добавляет их в Scene.
  -  EventManager подписывает игроков на события.

- Игровой цикл (App::loop):
  - ~App::processEvents~ обрабатывает SDL-события и передает их в ~EventManager~.
  - ~EventManager::sendEvent~ вызывает метод onEvent у всех подписчиков (~Player~), которые обрабатывают эти события.

- Обновление состояния (~App::update~):
  - ~App::update~ вызывает ~Scene::update~, который в свою очередь вызывает ~Player::update~ для каждого объекта сцены.
  - ~Player::update~ обновляет состояние фигуры игрока в зависимости от нажатых клавиш.

- Отрисовка (~App::draw~):
  - ~App::draw~ вызывает ~Scene::draw~, который вызывает ~Player::draw~ для каждого объекта сцены, если он находится в пределах текущего ~Viewport~.

* FAQ

** Кто вызывает ~Figure::getBoundingBox()~ и когда?

Метод ~Figure::getBoundingBox()~ вызывается в следующих случаях:
- Во время отрисовки сцены (App::draw):
  - В методе ~App::draw~, когда происходит отрисовка всех объектов сцены, проверяется, находится ли объект в пределах видимости (~Viewport~). Для этого используется метод ~App::isVisible~, который принимает SDL_Rect объекта и Viewport.
  - Чтобы получить ~SDL_Rect~ объекта, вызывается метод getBoundingBox для каждого объекта сцены. Так как ~Player~ наследует ~SceneObject~ и реализует метод ~getBoundingBox~, в свою очередь, ~Player::getBoundingBox~ вызывает ~Figure::getBoundingBox~ для получения границ фигуры игрока.
- При обработке столкновений или проверке нахождения объектов в определенной области:
  В игре могут быть моменты, когда нужно проверить пересечение границ объектов или нахождение объекта в определенной области. Для этого нужно получить границы объекта, и в таких случаях также вызывается ~getBoundingBox~.
