#+STARTUP: showall indent hidestars
#+TOC: headlines 3

* Основные Компоненты Движка
** GameObject

Использование компонентов: Каждый GameObject будет иметь список компонентов, таких как SpriteComponent, PhysicsComponent, InputComponent, и ScriptComponent.

** Component

Описание: Component является базовым классом для всех компонентов, которые могут быть добавлены к GameObject.

Типы компонентов:
- SpriteComponent: Отвечает за отрисовку спрайта на экране.
- PhysicsComponent: Обрабатывает физику объекта, включая коллизии и движение.
- InputComponent: Обрабатывает пользовательский ввод.
- ScriptComponent: Позволяет добавлять пользовательские скрипты для управления поведением объекта.

* Система Обработки Событий
** Event и EventListener

Позволяет объектам общаться друг с другом без жесткой привязки.

- Event: Структура, представляющая событие, например, нажатие клавиши или столкновение объектов.

- EventListener: Интерфейс, который реализуют классы, желающие получать уведомления о событиях.

** EventManager

Управляет подпиской и уведомлением слушателей о событиях.

Функциональность:
- Добавление/удаление слушателей событий.
- Отправка событий всем подписанным слушателям.

*  Система Рендеринга
** 1 Renderer

Отвечает за отрисовку всех объектов на экране.

Функциональность:
- Загрузка и управление текстурами.
- Отрисовка спрайтов и текста.

Использование контейнеров:
- Использует std::vector для хранения объектов, подлежащих отрисовке,
- и std::unordered_map для управления текстурами.

* Управление Ресурсами

** ResourceManager

Управляет загрузкой и хранением ресурсов, таких как текстуры, шрифты, звуки.

Использование умных указателей:
- Использует std::shared_ptr для управления ресурсами, которые могут быть использованы несколькими объектами.
- Хранит ресурсы в std::unordered_map для быстрого доступа по ключу.

* Система Физики

** PhysicsSystem

Обрабатывает физические взаимодействия между объектами.

Функциональность:
- Обновление позиции объектов.
- Обработка столкновений.

Использование очередей:
- Использует очередь событий для обработки столкновений в порядке их возникновения.

* Система Ввода

** InputManager

Обрабатывает ввод пользователя (клавиатура, мышь, геймпады).

Функциональность:
- Считывание текущего состояния ввода.
- Отправка событий ввода в EventManager.

* Многопоточность

** Загрузка ресурсов в фоне

Использует многопоточность для асинхронной загрузки ресурсов, чтобы не блокировать основной игровой поток.

Использование std::thread:
- Фоновая загрузка текстур, звуков и других ресурсов.
- Синхронизация с помощью std::mutex и std::lock_guard:
- Защита доступа к общим ресурсам при параллельной загрузке.

* Взаимодействие компонентов в игровом движке

Инициализация:
-  Игра начинает с инициализации основных систем: рендерера, менеджера ресурсов, системы событий и ввода.
-  ResourceManager загружает необходимые ресурсы, такие как текстуры и шрифты.

Создание объектов:
- GameObject создаются и инициализируются с необходимыми компонентами.
- Например, игроку добавляются компоненты SpriteComponent, PhysicsComponent и InputComponent.

Основной игровой цикл:
- Обработка ввода:
  - InputManager считывает текущий ввод пользователя и генерирует соответствующие события. Эти события отправляются в EventManager, который уведомляет подписанные InputComponent объектов.
- Обновление состояния объектов:
  - Каждый GameObject обновляет свои компоненты в зависимости от входных данных и логики игры. PhysicsComponent обновляет позицию и обрабатывает столкновения.
- Обработка событий:
  - EventManager обрабатывает очередь событий и уведомляет соответствующие слушатели.
- Рендеринг:
  - Renderer отрисовывает все спрайты и текстуры на экране в правильном порядке.

Фоновая загрузка ресурсов:
    Когда требуется новый ресурс (например, текстура для нового уровня), ResourceManager запускает фоновую загрузку с использованием std::thread.
    Загруженный ресурс добавляется в основной поток безопасным образом с использованием мьютексов.
